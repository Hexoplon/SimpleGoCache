// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cache.proto

package simplegocache

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cache service

type CacheService interface {
	NewCache(ctx context.Context, in *NewCacheMsg, opts ...client.CallOption) (*Empty, error)
	Add(ctx context.Context, in *Entry, opts ...client.CallOption) (*CacheMsg, error)
	Delete(ctx context.Context, in *Entry, opts ...client.CallOption) (*Empty, error)
	Read(ctx context.Context, in *Entry, opts ...client.CallOption) (*Entry, error)
	InCache(ctx context.Context, in *Entry, opts ...client.CallOption) (*Bool, error)
	Update(ctx context.Context, in *Entry, opts ...client.CallOption) (*CacheMsg, error)
	Prune(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
}

type cacheService struct {
	c    client.Client
	name string
}

func NewCacheService(name string, c client.Client) CacheService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "simplegocache"
	}
	return &cacheService{
		c:    c,
		name: name,
	}
}

func (c *cacheService) NewCache(ctx context.Context, in *NewCacheMsg, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Cache.NewCache", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Add(ctx context.Context, in *Entry, opts ...client.CallOption) (*CacheMsg, error) {
	req := c.c.NewRequest(c.name, "Cache.Add", in)
	out := new(CacheMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Delete(ctx context.Context, in *Entry, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Cache.Delete", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Read(ctx context.Context, in *Entry, opts ...client.CallOption) (*Entry, error) {
	req := c.c.NewRequest(c.name, "Cache.Read", in)
	out := new(Entry)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) InCache(ctx context.Context, in *Entry, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.name, "Cache.InCache", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Update(ctx context.Context, in *Entry, opts ...client.CallOption) (*CacheMsg, error) {
	req := c.c.NewRequest(c.name, "Cache.Update", in)
	out := new(CacheMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Prune(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Cache.Prune", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Cache.Close", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheHandler interface {
	NewCache(context.Context, *NewCacheMsg, *Empty) error
	Add(context.Context, *Entry, *CacheMsg) error
	Delete(context.Context, *Entry, *Empty) error
	Read(context.Context, *Entry, *Entry) error
	InCache(context.Context, *Entry, *Bool) error
	Update(context.Context, *Entry, *CacheMsg) error
	Prune(context.Context, *Empty, *Empty) error
	Close(context.Context, *Empty, *Empty) error
}

func RegisterCacheHandler(s server.Server, hdlr CacheHandler, opts ...server.HandlerOption) error {
	type cache interface {
		NewCache(ctx context.Context, in *NewCacheMsg, out *Empty) error
		Add(ctx context.Context, in *Entry, out *CacheMsg) error
		Delete(ctx context.Context, in *Entry, out *Empty) error
		Read(ctx context.Context, in *Entry, out *Entry) error
		InCache(ctx context.Context, in *Entry, out *Bool) error
		Update(ctx context.Context, in *Entry, out *CacheMsg) error
		Prune(ctx context.Context, in *Empty, out *Empty) error
		Close(ctx context.Context, in *Empty, out *Empty) error
	}
	type Cache struct {
		cache
	}
	h := &cacheHandler{hdlr}
	return s.Handle(s.NewHandler(&Cache{h}, opts...))
}

type cacheHandler struct {
	CacheHandler
}

func (h *cacheHandler) NewCache(ctx context.Context, in *NewCacheMsg, out *Empty) error {
	return h.CacheHandler.NewCache(ctx, in, out)
}

func (h *cacheHandler) Add(ctx context.Context, in *Entry, out *CacheMsg) error {
	return h.CacheHandler.Add(ctx, in, out)
}

func (h *cacheHandler) Delete(ctx context.Context, in *Entry, out *Empty) error {
	return h.CacheHandler.Delete(ctx, in, out)
}

func (h *cacheHandler) Read(ctx context.Context, in *Entry, out *Entry) error {
	return h.CacheHandler.Read(ctx, in, out)
}

func (h *cacheHandler) InCache(ctx context.Context, in *Entry, out *Bool) error {
	return h.CacheHandler.InCache(ctx, in, out)
}

func (h *cacheHandler) Update(ctx context.Context, in *Entry, out *CacheMsg) error {
	return h.CacheHandler.Update(ctx, in, out)
}

func (h *cacheHandler) Prune(ctx context.Context, in *Empty, out *Empty) error {
	return h.CacheHandler.Prune(ctx, in, out)
}

func (h *cacheHandler) Close(ctx context.Context, in *Empty, out *Empty) error {
	return h.CacheHandler.Close(ctx, in, out)
}
